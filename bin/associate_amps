#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import sys
import logging

# local imports
from shakemap.utils.config import get_config_paths
from shakemap.utils.amps import AmplitudeHandler

LOG_CFG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(levelname)s -- %(asctime)s -- '
                      '%(module)s.%(funcName)s -- %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
        },
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': True
        },
    }
}

LOGFILE = 'associate.log'


def get_parser():
    description = '''Associate any un-associated amplitudes with existing
    ShakeMap events.

    Amplitude data will be written to event data directories in ShakeMap
    station XML format.
    '''
    parser = argparse.ArgumentParser(description=description)
    return parser


def main(args):
    install_path, data_path = get_config_paths()
    if not os.path.isdir(data_path):
        print('%s is not a valid directory.' % data_path)
        sys.exit(1)

    # set up a daily rotating file handler logger
    logfile = os.path.join(install_path, 'logs', LOGFILE)
    log_cfg = LOG_CFG.copy()
    log_cfg['handlers']['default']['filename'] = logfile
    logging.config.dictConfig(log_cfg)
    logger = logging.getLogger()

    # what to do if the database is locked by another process?
    handler = AmplitudeHandler(install_path, data_path)

    # scan the event table and find any data that is associated with each event

    logger.info('Searching for amp data to associate.')
    associated = handler.associateAll(pretty_print=True)
    logger.info('Found amplitude data for %i events.' % (len(associated)))


if __name__ == '__main__':
    parser = get_parser()
    pargs, unknown = parser.parse_known_args()
    main(pargs)
