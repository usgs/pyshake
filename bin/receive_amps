#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import sys
import glob
import logging

# local imports
from shakemap.utils.config import get_config_paths
from shakemap.utils.amps import AmplitudeHandler

LOG_CFG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(levelname)s -- %(asctime)s -- '
                      '%(module)s.%(funcName)s -- %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
        },
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': True
        },
    }
}

LOGFILE = 'amps.log'


def get_parser():
    """Set up the argparse instance for this script.

    Returns:
        ArgumentParser: argparse instance for this script.
    """
    description = '''Insert strong motion unassociated peak amplitude
    files into a database.
    '''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--directory',
                        help='Directory containing unassociated strong '
                             'motion peak amplitudes')

    return parser


def main(args):
    """Main method for script.

    """
    install_path, data_path = get_config_paths()
    if not os.path.isdir(data_path):
        print('%s is not a valid directory.' % data_path)
        sys.exit(1)

    # set up a daily rotating file handler logger
    logfile = os.path.join(install_path, 'logs', LOGFILE)
    log_cfg = LOG_CFG.copy()
    log_cfg['handlers']['default']['filename'] = logfile
    logging.config.dictConfig(log_cfg)
    logger = logging.getLogger()

    logger.info('Parsing input directory %s' % args.directory)

    # Create a handler object
    handler = AmplitudeHandler(install_path, data_path)

    logger.info('Searching %s...' % args.directory)
    xmlfiles = glob.glob(os.path.join(args.directory, '*.xml'))
    nloaded = 0
    for xmlfile in xmlfiles:
        try:
            handler.insertAmps(xmlfile)
            nloaded += 1
        except Exception as e:
            logger.info('Could not insert file %s: "%s"' % (xmlfile, str(e)))
            # TODO - configure a directory where "bad" amps files can go
            continue
    logger.info('Inserted %i amplitude files into the database.' % nloaded)
    handler.print_insert_times()


if __name__ == '__main__':
    parser = get_parser()
    pargs, unknown = parser.parse_known_args()
    main(pargs)
